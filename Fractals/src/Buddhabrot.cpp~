#include "Buddhabrot.h"
#include "stdlib.h"
#include "time.h"
using namespace std;

void Buddhabrot::gen_fractal()
{
  //srand (time(NULL));
  double MinRe = -2.5;
  double MaxRe = 1.0;
  double MinIm = -1.0;
  int height = get_height();
  int width = get_width();
  double MaxIm = MinIm+(MaxRe-MinRe)*height/width;
  double Re_factor = (MaxRe-MinRe)/(width-1);
  double Im_factor = (MaxIm-MinIm)/(height-1);
  int num_pixels = height*width;
  int outer_array[num_pixels];
  for(int i = 0; i < (10*num_pixels); i++)
    {
      int num = rand() % num_pixels;
      int temp_array[num_pixels];
      int x = num%height;
      int y = num/height;
      double c_im = MaxIm-y*Im_factor;
      double c_re = MinRe+x*Re_factor;
      double Z_re, Z_im = 0;
      bool isInside = true;
      int iter = 0;
      for(iter; iter < MAXITER; iter++)
	{
	  if((Z_re*Z_re + Z_im*Z_im) > 4)
	    {
	      isInside = false;
	      temp_array[num]++;
	      break;
	    }
	  double Z_im2 = Z_im*Z_im;
	  Z_im = 2*Z_re*Z_im+c_im;
	  Z_re= Z_re*Z_re-Z_im2+c_re;
	  temp_array[num]++;
	}
      if(isInside == false)
	{
	  outer_array[num] += temp_array[num];
	}
    }
  int temp;
  #pragma omp parallel for
  for(int i = 0; i < num_pixels; i++)
    {
      if(i == 0)
	{
	  temp = outer_array[0];
	  continue;
	}
      if(outer_array[i] > temp)
	{
	  temp = outer_array[i];
	}
    }
  #pragma omp parallel for
  for(int k = 0; k < num_pixels; k++)
    {
      int x = k%height;
      int y =k/height;
      int temp2 = outer_array[k];
      outer_array[k] = temp2/temp;
      m_bitmap[x*height*4 + y*4] = pow( (double(outer_array[k]))/MAXITER,0.60)*255;
      m_bitmap[x*height*4 + y*4 + 1] = pow((double(outer_array[k]))/MAXITER,0.40)*255;
      m_bitmap[x*height*4 + y*4 + 2] = pow((double(outer_array[k]))/MAXITER, 0.10)*255;
      m_bitmap[x*height*4 + y*4 + 3] = 255;
    }
      
  
}
   
	// Real (-2.5, 1)
	// Imaginary (-1, 1)
    
    // Initialize a bucket array (one integer for each pixel) (this is the outer bucket array)

    // iterate over the following several thousand times (at least more times than # of pixels)
  
        // Create a temporary bucket array (one integer for each pixel
        //
        // Let C be a random point in the complex plane
        //
        // Trace the orbit of C, incrementing the temporary bucket that z falls in for each iteration
        // If Z is in the mandelbrot set, discard the temporary bucket
        // Else, merge the temporary bucket with the outer bucket array
        

     // Normalize the global bucket array by dividing each value by the maximum value
     // Color each pixel however you wish
     //
     // Parallelizing this function is tricky. It helps to have a list of temporary bucket arrays
     // Which are merged after the computation has finished.
     
     // Parallelizing is not required, but will save you a lot of time.
     


    

